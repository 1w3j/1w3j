# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
#font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8
font pango:Hack 9

# Before i3 v4.8, we used to recommend this one as the default:
 # font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# kill focused window
bindsym $mod+Shift+q kill

# start dmenu (a program launcher)
# bindsym $mod+d exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "Chromium "
set $ws2 "Ranger "
set $ws3 "Terminal "
set $ws4 "Code "
set $ws5 "Work "
set $ws6 "Whatsapp "
set $ws7 "Telegram "
set $ws8 "Nemo "
set $ws9 "rtorrent "
set $ws10 "cmus "

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
#bar {
#      status_command i3status
#}

### MY SETTINGS ###

bindsym XF86AudioMute exec amixer -q set Master toggle
bindsym XF86AudioRaiseVolume exec amixer -q sset Master 5%+
bindsym XF86AudioLowerVolume exec amixer -q sset Master 5%-
bindsym XF86MonBrightnessUp exec xbacklight -inc 5
bindsym XF86MonBrightnessDown exec xbacklight -dec 5
bindsym XF86AudioPause exec cmus-remote --pause
bindsym XF86AudioNext exec cmus-remote --next
bindsym XF86AudioPrev exec cmus-remote --prev

bindsym $mod+shift+o exec i3lock
bindsym $mod+n exec nemo ~
bindsym $mod+t exec ~/bin/toggletouchpad
bindsym $mod+d exec rofi -show run

assign [class="^Chromium$"] $ws1
assign [title="ranger"] $ws2
assign [title="terminal"] $ws3
assign [class="^Thunderbird$"] $ws4
assign [class="^jetbrains"] $ws4
assign [class="^whatsapp-desktop$"] $ws6
assign [class="^TelegramDesktop$"] $ws7
assign [class="^Nemo$"] $ws8
assign [title="rtorrent"] $ws9
assign [title="cmus"] $ws10

exec --no-startup-id /usr/lib/gnome-settings-daemon/gsd-xsettings
exec --no-startup-id compton -cCGb --backend glx --vsync opengl
exec_always --no-startup-id gnome-power-manager
exec --no-startup-id nitrogen --restore
exec --no-startup-id wal -i ~/1w3j/wallpapers/OMEN_by_HP.jpg
exec_always 'setxkbmap -layout us,es -option grp:alt_shift_toggle'
exec --no-startup-id "sh -c 'sleep 10; exec redshift-gtk'"
exec --no-startup-id jetbrains-toolbox --minimize
exec --no-startup-id xset -b
exec --no-startup-id chromium
exec --no-startup-id "sh -c 'sleep 10; exec urxvt -e tmux attach-session -t ranger'"
exec --no-startup-id "sh -c 'sleep 10; exec optirun urxvt -e tmux attach-session -t terminal'"
exec --no-startup-id thunderbird
exec --no-startup-id Whatsapp
exec --no-startup-id telegram-desktop
exec --no-startup-id nemo
exec --no-startup-id "sh -c 'sleep 10; exec urxvt -e tmux attach-session -t rtorrent'"
exec --no-startup-id "sh -c 'sleep 10; exec urxvt -e tmux attach-session -t cmus'"
exec_always i3-msg "workspace $ws5"

focus_follows_mouse yes
workspace_auto_back_and_forth yes

### Explanation:

# You can have multiple sets of bindings by using different binding modes. When you switch to another binding mode,
#   all bindings from the current mode are released and only the bindings defined in the new mode are valid for as
#   long as you stay in that binding mode. The only predefined binding mode is default, which is the mode i3 starts
#   out with and to which all bindings not defined in a specific binding mode belong.
# Working with binding modes consists of two parts: defining a binding mode and switching to it. For these purposes,
#   there are one config directive and one command, both of which are called mode. The directive is used to define
#   the bindings belonging to a certain binding mode, while the command will switch to the specified mode.
# It is recommended to use binding modes in combination with [variables] in order to make maintenance easier. Below
#   is an example of how to use a binding mode.
# Note that it is advisable to define bindings for switching back to the default mode.
# Note that it is possible to use [pango_markup] for binding modes, but you need to enable it explicitly by passing
#   the --pango_markup flag to the mode definition.

#set $mode_launcher Launch: [f]irefox [t]hunderbird
#bindsym $mod+o mode "$mode_launcher"
#mode "$mode_launcher" {
#  bindsym f exec firefox
#  bindsym t exec thunderbird
#
#  bindsym Escape mode "default"
#  bindsym Return mode "default"
#}

## LOGOUT BINDING MODE
set $logout_mode Logout?  Y/n
bindsym $mod+Shift+e mode "$logout_mode"
#bindsym Y i3-msg exit
mode "$logout_mode" {
  bindsym y exec i3-msg exit
  bindsym Escape mode "default"
  bindsym n mode "default"
}

# exit i3 (logs you out of your X session)
# bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

default_border normal
hide_edge_borders vertical
no_focus [window_role="pop-up"]

# http://briancaffey.github.io/2017/10/17/moving-from-gnome-to-i3-on-arch-linux.html
#for_window [class="^.*"] border pixel 0

# https://unix.stackexchange.com/questions/136932/why-am-i-having-ghosting-and-tearing-with-the-i3-window-manager-paired-with-xcom
new_window pixel

# i3-gaps
gaps inner 10
gaps outer 0
#workspace 1 gaps inner 0

set_from_resource         $bg-color                       i3wm.color0     #000000
set_from_resource         $inactive-bg-color              i3wm.color0     #000000
set_from_resource         $fg-color                       i3wm.color4     #ffffff
set_from_resource         $dark-fg-color                  i3wm.color8     #aaaaaa
set_from_resource         $inactive-fg-color              i3wm.color7     #ffffff
set_from_resource         $focused-border-color           i3wm.color1     #ff0000
set_from_resource         $urgent-bg-color                i3wm.color2     #ff0000
set_from_resource         $urgent-fg-color                i3wm.color0     #000000
set_from_resource         $indicator-focused-color        i3wm.color6     #ff0000
set_from_resource         $indicator-unfocused-color      i3wm.color7     #ff0000

# window colors
#                       border                background         text                 indicator                   child_border
client.focused          $focused-border-color $bg-color          $fg-color            $indicator-focused-color
client.unfocused        $inactive-bg-color    $inactive-bg-color $inactive-fg-color   $indicator-unfocused-color
client.focused_inactive $inactive-bg-color    $inactive-bg-color $inactive-fg-color   $indicator-unfocused-color
client.urgent           $urgent-bg-color      $urgent-bg-color   $urgent-fg-color     $dark-fg-color
client.placeholder      $bg-color             $dark-fg-color     $fg-color            $bg-color                   $dark-fg-color
client.background       $bg-color

bar {
  position top
  status_command i3blocks -c /home/iqbal/.config/i3/i3blocks.conf
  colors {
    background  $bg-color
    separator   $fg-color
#                      border             background         text
    focused_workspace  $bg-color          $bg-color          $fg-color
    inactive_workspace $inactive-bg-color $inactive-bg-color $inactive-fg-color
    urgent_workspace   $urgent-bg-color   $urgent-bg-color   $urgent-fg-color
  }
}

bindsym Print exec gnome-screenshot
